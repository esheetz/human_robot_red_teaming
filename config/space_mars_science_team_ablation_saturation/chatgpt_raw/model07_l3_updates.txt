Below is an updated version of the PDDL domain that adds mechanisms for distributed reasoning across the robot team. In this revision, we introduce new predicates and actions that enable the team to form a consensus about the overall operational state. In particular, we add:

- **Global Consensus Predicates and Leader Election:**
  A new predicate `(global_operational_consensus)` represents that the distributed team has reached agreement on the overall system state. In addition, an `(elected_leader ?r - robot)` predicate designates one robot as the teamâ€™s leader.

- **Collecting and Disseminating Status Updates:**
  New actions (e.g. *elect_leader* and *collect_status_updates*) allow a leader to gather status information from team members and then set the global consensus. The local operational state update actions are modified to require that the global consensus is met. This extra layer of distributed reasoning helps ensure that local decisions are made in the context of the overall team status.

Below is the complete updated model:

```lisp
(define (domain space_mars_science_team)
  (:requirements :strips :typing)
  (:types robot sample level)

  (:predicates
    ;; Sample status and analysis (parameterized by sample)
    (sample_detected ?s - sample)
    (has_sample ?r - robot ?s - sample)
    (sample_analyzed ?s - sample)
    (findings_ready ?r - robot ?s - sample)
    (sample_verified ?r - robot ?s - sample)

    ;; Communication status (global and per robot)
    (comm_link_active)
    (message_sent ?r - robot)
    (message_acknowledged ?r - robot)

    ;; Backup communication and mission status (multiple backups)
    (backup_comm_active)
    (backup_comm_active2)
    (backup_comm_active3)
    (mission_active)

    ;; Communication availability: true if at least one channel is active
    (communication_ok)

    ;; Team coordination and robot availability
    (team_synced)
    (free ?r - robot)

    ;; Safety conditions
    (hazard_detected)
    (system_nominal)

    ;; Detailed environmental conditions with granular sensor levels
    (temperature_normal)
    (radiation_normal)
    (dust_normal)
    (temperature_level ?l - level)
    (radiation_level ?l - level)
    (dust_level ?l - level)

    ;; Robot self-diagnosis and calibration
    (robot_healthy ?r - robot)
    (calibrated ?r - robot)

    ;; Resource status (e.g., battery level, power)
    (sufficient_resources ?r - robot)

    ;; Logging and verification predicates
    (diagnostic_log_sent ?r - robot)
    (environment_log_sent)
    (team_status_logged)
    (hardware_status_verified ?r - robot)
    (environment_verified)

    ;; Ground control periodic status update
    (gc_status_updated)

    ;; Composite operational state: true when all conditions for safe operation hold
    (operational_state ?r - robot)

    ;; --- Contingency Predicates ---
    (safe_mode ?r - robot)
    (buffered_diagnostic_log ?r - robot)
    (buffered_environment_log)

    ;; --- New: Grace Period Predicate ---
    (grace_period_active ?r - robot)

    ;; --- New: Extended Grace Period Predicate (for persistent issues) ---
    (extended_grace_period ?r - robot)

    ;; --- New: Adaptive Sensor Threshold Adjustment ---
    (adaptive_sensor_adjusted ?r - robot)

    ;; --- New: Backup Data Sharing ---
    (backup_data_shared ?r - robot)

    ;; --- New: Failure Notification Predicate ---
    (failure_notified ?r - robot)

    ;; --- New: Timing and Buffering Predicates ---
    (buffer_timer_expired ?r - robot)
    (state_update_timer_expired ?r - robot)
    (waiting ?r - robot)

    ;; --- New: Global Consensus for Distributed Reasoning ---
    (global_operational_consensus)
    (elected_leader ?r - robot)

    ;; --- Inter-Agent Status Sharing ---
    (status_shared ?r - robot)
  )

  ;; --- New: Leader Election and Global Consensus Actions ---
  (:action elect_leader
    :parameters (?r - robot)
    :precondition (and (free ?r) team_synced)
    :effect (elected_leader ?r)
  )

  (:action collect_status_updates
    :parameters (?leader - robot)
    :precondition (and (elected_leader ?leader) team_synced)
    :effect (global_operational_consensus)
  )

  ;; --- Granular Sensor Level Update Actions ---
  (:action set_temperature_level
    :parameters (?l - level)
    :precondition temperature_normal
    :effect (temperature_level ?l)
  )

  (:action set_radiation_level
    :parameters (?l - level)
    :precondition radiation_normal
    :effect (radiation_level ?l)
  )

  (:action set_dust_level
    :parameters (?l - level)
    :precondition dust_normal
    :effect (dust_level ?l)
  )

  ;; --- Adaptive Sensor Threshold Actions ---
  (:action adjust_sensor_threshold
    :parameters (?r - robot)
    :precondition (and (free ?r) (not temperature_normal))
    :effect (adaptive_sensor_adjusted ?r)
  )

  (:action reset_sensor_threshold_adjustment
    :parameters (?r - robot)
    :precondition temperature_normal
    :effect (not (adaptive_sensor_adjusted ?r))
  )

  ;; --- Composite Operational State Update Actions ---
  ;; Normal update: requires all sensors to be normal and global consensus.
  (:action update_operational_state
    :parameters (?r - robot)
    :precondition (and (robot_healthy ?r)
                       system_nominal
                       mission_active
                       communication_ok
                       (calibrated ?r)
                       (sufficient_resources ?r)
                       temperature_normal
                       radiation_normal
                       dust_normal
                       gc_status_updated
                       global_operational_consensus
                       (not (safe_mode ?r))
                       (not (grace_period_active ?r))
                       (not (extended_grace_period ?r)))
    :effect (operational_state ?r)
  )
  ;; Adaptive update: if sensor adjustment is active, allow update.
  (:action update_operational_state_adaptive
    :parameters (?r - robot)
    :precondition (and (robot_healthy ?r)
                       system_nominal
                       mission_active
                       communication_ok
                       (calibrated ?r)
                       (sufficient_resources ?r)
                       gc_status_updated
                       global_operational_consensus
                       (adaptive_sensor_adjusted ?r)
                       (not (safe_mode ?r))
                       (not (grace_period_active ?r))
                       (not (extended_grace_period ?r)))
    :effect (operational_state ?r)
  )

  (:action invalidate_operational_state
    :parameters (?r - robot)
    :precondition (operational_state ?r)
    :effect (not (operational_state ?r))
  )

  (:action invalidate_operational_state_due_to_temperature
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not temperature_normal)
                       (not (grace_period_active ?r)))
    :effect (not (operational_state ?r))
  )

  (:action invalidate_operational_state_due_to_radiation
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not radiation_normal)
                       (not (grace_period_active ?r)))
    :effect (not (operational_state ?r))
  )

  (:action invalidate_operational_state_due_to_dust
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not dust_normal)
                       (not (grace_period_active ?r)))
    :effect (not (operational_state ?r))
  )

  (:action invalidate_operational_state_due_to_communication
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not communication_ok)
                       (not (grace_period_active ?r)))
    :effect (not (operational_state ?r))
  )

  (:action invalidate_operational_state_due_to_health
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not (robot_healthy ?r)))
    :effect (not (operational_state ?r))
  )

  (:action invalidate_operational_state_due_to_calibration
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not (calibrated ?r)))
    :effect (not (operational_state ?r))
  )

  (:action invalidate_operational_state_due_to_resources
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not (sufficient_resources ?r)))
    :effect (not (operational_state ?r))
  )

  (:action invalidate_operational_state_due_to_gc_status
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not gc_status_updated))
    :effect (not (operational_state ?r))
  )

  (:action invalidate_operational_state_due_to_safe_mode
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (safe_mode ?r))
    :effect (not (operational_state ?r))
  )

  ;; --- Grace Period Management Actions ---
  (:action enter_grace_period
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not (grace_period_active ?r)))
    :effect (grace_period_active ?r)
  )

  (:action exit_grace_period
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) communication_ok)
    :effect (not (grace_period_active ?r))
  )

  (:action end_grace_period_due_to_comm_failure
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) (not communication_ok))
    :effect (and (not (grace_period_active ?r)) (not (operational_state ?r)))
  )

  (:action end_grace_period_due_to_sensor_failure
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) (not temperature_normal))
    :effect (and (not (grace_period_active ?r)) (not (operational_state ?r)))
  )

  ;; --- Extended Grace Period (Adaptive Threshold Contingency) ---
  (:action extend_grace_period
    :parameters (?r - robot)
    :precondition (grace_period_active ?r)
    :effect (extended_grace_period ?r)
  )

  (:action exit_extended_grace_period
    :parameters (?r - robot)
    :precondition (and (extended_grace_period ?r) communication_ok)
    :effect (not (extended_grace_period ?r))
  )

  ;; --- New: Buffering Timer Actions ---
  (:action start_buffer_timer
    :parameters (?r - robot)
    :precondition (buffered_diagnostic_log ?r)
    :effect (buffer_timer_expired ?r)
  )

  (:action start_state_update_timer
    :parameters (?r - robot)
    :precondition (operational_state ?r)
    :effect (state_update_timer_expired ?r)
  )

  ;; --- Force Retry/Update Actions ---
  (:action force_retry_send_diagnostic_log
    :parameters (?r - robot)
    :precondition (and buffered_diagnostic_log ?r, buffer_timer_expired ?r, comm_link_active, team_synced)
    :effect (and diagnostic_log_sent ?r (not buffered_diagnostic_log ?r) (not buffer_timer_expired ?r))
  )

  (:action force_state_update
    :parameters (?r - robot)
    :precondition (state_update_timer_expired ?r)
    :effect (update_operational_state ?r)
  )

  ;; --- Team Coordination and Inter-Agent Status Sharing ---
  (:action sync_team
    :parameters ()
    :precondition comm_link_active
    :effect team_synced
  )

  (:action unsync_team
    :parameters ()
    :precondition team_synced
    :effect (not team_synced)
  )

  (:action share_status
    :parameters (?r - robot)
    :precondition (and comm_link_active team_synced)
    :effect (status_shared ?r)
  )

  (:action send_team_status
    :parameters ()
    :precondition (and comm_link_active team_synced)
    :effect team_status_logged
  )

  ;; --- Ground Control Status Update ---
  (:action ground_control_status_update
    :parameters ()
    :precondition comm_link_active
    :effect gc_status_updated
  )

  ;; --- Safety Update Actions ---
  (:action detect_hazard
    :parameters ()
    :precondition system_nominal
    :effect (and hazard_detected (not system_nominal))
  )

  (:action clear_hazard
    :parameters ()
    :precondition hazard_detected
    :effect (and system_nominal (not hazard_detected))
  )

  ;; --- Self-Diagnosis, Calibration, and Resource Checks ---
  (:action self_diagnose
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (robot_healthy ?r)
  )

  (:action self_calibrate
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (calibrated ?r)
  )

  (:action check_resources
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (sufficient_resources ?r)
  )

  (:action perform_maintenance
    :parameters (?r - robot)
    :precondition (and (free ?r) (not (robot_healthy ?r)))
    :effect (robot_healthy ?r)
  )

  ;; --- Detailed Environmental Condition Updates ---
  (:action update_temperature_normal
    :parameters ()
    :precondition (not temperature_normal)
    :effect temperature_normal
  )

  (:action update_temperature_extreme
    :parameters ()
    :precondition temperature_normal
    :effect (not temperature_normal)
  )

  (:action update_radiation_normal
    :parameters ()
    :precondition (not radiation_normal)
    :effect radiation_normal
  )

  (:action update_radiation_extreme
    :parameters ()
    :precondition radiation_normal
    :effect (not radiation_normal)
  )

  (:action update_dust_normal
    :parameters ()
    :precondition (not dust_normal)
    :effect dust_normal
  )

  (:action update_dust_extreme
    :parameters ()
    :precondition dust_normal
    :effect (not dust_normal)
  )

  (:action pause_mission_due_to_environment
    :parameters ()
    :precondition (and (or (not temperature_normal) (not radiation_normal) (not dust_normal)) mission_active)
    :effect (not mission_active)
  )

  ;; --- Communication Blackout and Backup Protocols ---
  (:action activate_backup_comm
    :parameters ()
    :precondition (not comm_link_active)
    :effect (and backup_comm_active communication_ok)
  )

  (:action activate_backup_comm2
    :parameters ()
    :precondition (and (not comm_link_active) (not backup_comm_active2))
    :effect backup_comm_active2
  )

  (:action activate_backup_comm3
    :parameters ()
    :precondition (and (not comm_link_active) (not backup_comm_active3))
    :effect backup_comm_active3
  )

  (:action deactivate_backup_comm
    :parameters ()
    :precondition backup_comm_active
    :effect (not backup_comm_active)
  )

  (:action pause_mission
    :parameters ()
    :precondition (and (not comm_link_active)
                       (not backup_comm_active)
                       (not backup_comm_active2)
                       (not backup_comm_active3)
                       mission_active)
    :effect (and (not mission_active) (not communication_ok))
  )

  (:action resume_mission
    :parameters ()
    :precondition comm_link_active
    :effect (and mission_active communication_ok)
  )

  (:action switch_to_primary_comm
    :parameters ()
    :precondition (and comm_link_active (or backup_comm_active backup_comm_active2 backup_comm_active3))
    :effect (and (not backup_comm_active)
                 (not backup_comm_active2)
                 (not backup_comm_active3))
  )

  ;; --- Logging and Ground Control Verification Actions ---
  (:action send_diagnostic_log
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) comm_link_active team_synced (not (safe_mode ?r)))
    :effect (diagnostic_log_sent ?r)
  )

  (:action send_environment_log
    :parameters ()
    :precondition (and comm_link_active team_synced (not (exists (?r - robot) (safe_mode ?r))))
    :effect environment_log_sent
  )

  (:action verify_hardware_status
    :parameters (?r - robot)
    :precondition (and (diagnostic_log_sent ?r) comm_link_active team_synced)
    :effect (hardware_status_verified ?r)
  )

  (:action verify_environment_readings
    :parameters ()
    :precondition (and environment_log_sent comm_link_active team_synced)
    :effect environment_verified
  )

  (:action invalidate_hardware_status_verification
    :parameters (?r - robot)
    :precondition (and (hardware_status_verified ?r) (not (diagnostic_log_sent ?r)))
    :effect (not (hardware_status_verified ?r))
  )

  (:action invalidate_environment_verification
    :parameters ()
    :precondition (and environment_verified (not environment_log_sent))
    :effect (not environment_verified)
  )

  ;; --- Contingency Actions for Communication and Logging ---
  (:action enter_safe_mode
    :parameters (?r - robot)
    :precondition (not communication_ok)
    :effect (safe_mode ?r)
  )

  (:action exit_safe_mode
    :parameters (?r - robot)
    :precondition communication_ok
    :effect (not (safe_mode ?r))
  )

  (:action buffer_diagnostic_log
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not diagnostic_log_sent ?r))
    :effect (buffered_diagnostic_log ?r)
  )

  (:action retry_send_diagnostic_log
    :parameters (?r - robot)
    :precondition (and buffered_diagnostic_log ?r comm_link_active team_synced)
    :effect (and diagnostic_log_sent ?r (not buffered_diagnostic_log ?r))
  )

  (:action buffer_environment_log
    :parameters ()
    :precondition (and environment_verified (not environment_log_sent))
    :effect buffered_environment_log
  )

  (:action retry_send_environment_log
    :parameters ()
    :precondition (and buffered_environment_log comm_link_active team_synced)
    :effect (and environment_log_sent (not buffered_environment_log))
  )

  (:action retract_status_shared_due_to_safe_mode
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (status_shared ?r))
    :effect (not (status_shared ?r))
  )

  (:action invalidate_hardware_status_due_to_safe_mode
    :parameters (?r - robot)
    :precondition (and (hardware_status_verified ?r) (safe_mode ?r))
    :effect (not (hardware_status_verified ?r))
  )

  (:action invalidate_environment_verification_due_to_comm_loss
    :parameters ()
    :precondition (and environment_verified (not communication_ok))
    :effect (not environment_verified)
  )

  ;; --- Grace Period Management Actions ---
  (:action enter_grace_period
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not (grace_period_active ?r)))
    :effect (grace_period_active ?r)
  )

  (:action exit_grace_period
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) communication_ok)
    :effect (not (grace_period_active ?r))
  )

  (:action end_grace_period_due_to_comm_failure
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) (not communication_ok))
    :effect (and (not (grace_period_active ?r)) (not (operational_state ?r)))
  )

  (:action end_grace_period_due_to_sensor_failure
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) (not temperature_normal))
    :effect (and (not (grace_period_active ?r)) (not (operational_state ?r)))
  )

  ;; --- Extended Grace Period (Adaptive Threshold Contingency) ---
  (:action extend_grace_period
    :parameters (?r - robot)
    :precondition (grace_period_active ?r)
    :effect (extended_grace_period ?r)
  )

  (:action exit_extended_grace_period
    :parameters (?r - robot)
    :precondition (and (extended_grace_period ?r) communication_ok)
    :effect (not (extended_grace_period ?r))
  )

  ;; --- Updated Emergency Reboot (Waits for safe mode to clear and requires extended grace) ---
  (:action emergency_reboot
    :parameters (?r - robot)
    :precondition (and (extended_grace_period ?r) (not (safe_mode ?r)) (not (operational_state ?r)))
    :effect (and (robot_healthy ?r) (calibrated ?r) (sufficient_resources ?r)
                 (free ?r) (not (extended_grace_period ?r)))
  )

  ;; Emergency shutdown if communication remains lost.
  (:action emergency_shutdown
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (not communication_ok))
    :effect (and (not (robot_healthy ?r)) (not (operational_state ?r)))
  )

  ;; Attempt to reboot the primary communication system.
  (:action attempt_reboot_comm
    :parameters ()
    :precondition (not communication_ok)
    :effect comm_link_active
  )

  ;; Switch to backup sensors if a sensor failure is detected.
  (:action switch_to_backup_sensor_temperature
    :parameters (?r - robot ?l - level)
    :precondition (not temperature_normal)
    :effect temperature_normal
  )

  (:action switch_to_backup_sensor_radiation
    :parameters (?r - robot ?l - level)
    :precondition (not radiation_normal)
    :effect radiation_normal
  )

  (:action switch_to_backup_sensor_dust
    :parameters (?r - robot ?l - level)
    :precondition (not dust_normal)
    :effect dust_normal
  )

  ;; --- Periodic Backup Data Broadcasting ---
  (:action broadcast_backup_data
    :parameters (?r - robot)
    :precondition (and comm_link_active team_synced
                       (or buffered_diagnostic_log ?r buffered_environment_log)
                       (not (safe_mode ?r)))
    :effect (backup_data_shared ?r)
  )

  ;; --- New: Notify Ground Control of Severe Failure ---
  (:action notify_ground_control_of_failure
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (not (operational_state ?r)) (not (failure_notified ?r)) comm_link_active)
    :effect (failure_notified ?r)
  )

  ;; --- New: System Reset for Severe Failures ---
  (:action system_reset
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (failure_notified ?r) comm_link_active)
    :effect (and (not safe_mode ?r)
                 (not grace_period_active ?r)
                 (not extended_grace_period ?r)
                 (free ?r)
                 (robot_healthy ?r)
                 (calibrated ?r)
                 (sufficient_resources ?r)
                 (not failure_notified ?r))
  )

  ;; --- New: Timing and Buffering Actions ---
  (:action start_buffer_timer
    :parameters (?r - robot)
    :precondition (buffered_diagnostic_log ?r)
    :effect (buffer_timer_expired ?r)
  )

  (:action start_state_update_timer
    :parameters (?r - robot)
    :precondition (operational_state ?r)
    :effect (state_update_timer_expired ?r)
  )

  (:action force_retry_send_diagnostic_log
    :parameters (?r - robot)
    :precondition (and buffered_diagnostic_log ?r, buffer_timer_expired ?r, comm_link_active, team_synced)
    :effect (and diagnostic_log_sent ?r (not buffered_diagnostic_log ?r) (not buffer_timer_expired ?r))
  )

  (:action force_state_update
    :parameters (?r - robot)
    :precondition (state_update_timer_expired ?r)
    :effect (update_operational_state ?r)
  )

  ;; --- Team Coordination and Inter-Agent Status Sharing ---
  (:action sync_team
    :parameters ()
    :precondition comm_link_active
    :effect team_synced
  )

  (:action unsync_team
    :parameters ()
    :precondition team_synced
    :effect (not team_synced)
  )

  (:action share_status
    :parameters (?r - robot)
    :precondition (and comm_link_active team_synced)
    :effect (status_shared ?r)
  )

  (:action send_team_status
    :parameters ()
    :precondition (and comm_link_active team_synced)
    :effect team_status_logged
  )

  ;; --- Ground Control Status Update ---
  (:action ground_control_status_update
    :parameters ()
    :precondition comm_link_active
    :effect gc_status_updated
  )

  ;; --- Safety Update Actions ---
  (:action detect_hazard
    :parameters ()
    :precondition system_nominal
    :effect (and hazard_detected (not system_nominal))
  )

  (:action clear_hazard
    :parameters ()
    :precondition hazard_detected
    :effect (and system_nominal (not hazard_detected))
  )

  ;; --- Self-Diagnosis, Calibration, and Resource Checks ---
  (:action self_diagnose
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (robot_healthy ?r)
  )

  (:action self_calibrate
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (calibrated ?r)
  )

  (:action check_resources
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (sufficient_resources ?r)
  )

  (:action perform_maintenance
    :parameters (?r - robot)
    :precondition (and (free ?r) (not (robot_healthy ?r)))
    :effect (robot_healthy ?r)
  )

  ;; --- Detailed Environmental Condition Updates ---
  (:action update_temperature_normal
    :parameters ()
    :precondition (not temperature_normal)
    :effect temperature_normal
  )

  (:action update_temperature_extreme
    :parameters ()
    :precondition temperature_normal
    :effect (not temperature_normal)
  )

  (:action update_radiation_normal
    :parameters ()
    :precondition (not radiation_normal)
    :effect radiation_normal
  )

  (:action update_radiation_extreme
    :parameters ()
    :precondition radiation_normal
    :effect (not radiation_normal)
  )

  (:action update_dust_normal
    :parameters ()
    :precondition (not dust_normal)
    :effect dust_normal
  )

  (:action update_dust_extreme
    :parameters ()
    :precondition dust_normal
    :effect (not dust_normal)
  )

  (:action pause_mission_due_to_environment
    :parameters ()
    :precondition (and (or (not temperature_normal) (not radiation_normal) (not dust_normal)) mission_active)
    :effect (not mission_active)
  )

  ;; --- Communication Blackout and Backup Protocols ---
  (:action activate_backup_comm
    :parameters ()
    :precondition (not comm_link_active)
    :effect (and backup_comm_active communication_ok)
  )

  (:action activate_backup_comm2
    :parameters ()
    :precondition (and (not comm_link_active) (not backup_comm_active2))
    :effect backup_comm_active2
  )

  (:action activate_backup_comm3
    :parameters ()
    :precondition (and (not comm_link_active) (not backup_comm_active3))
    :effect backup_comm_active3
  )

  (:action deactivate_backup_comm
    :parameters ()
    :precondition backup_comm_active
    :effect (not backup_comm_active)
  )

  (:action pause_mission
    :parameters ()
    :precondition (and (not comm_link_active)
                       (not backup_comm_active)
                       (not backup_comm_active2)
                       (not backup_comm_active3)
                       mission_active)
    :effect (and (not mission_active) (not communication_ok))
  )

  (:action resume_mission
    :parameters ()
    :precondition comm_link_active
    :effect (and mission_active communication_ok)
  )

  (:action switch_to_primary_comm
    :parameters ()
    :precondition (and comm_link_active (or backup_comm_active backup_comm_active2 backup_comm_active3))
    :effect (and (not backup_comm_active)
                 (not backup_comm_active2)
                 (not backup_comm_active3))
  )

  ;; --- Logging and Ground Control Verification Actions ---
  (:action send_diagnostic_log
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) comm_link_active team_synced (not (safe_mode ?r)))
    :effect (diagnostic_log_sent ?r)
  )

  (:action send_environment_log
    :parameters ()
    :precondition (and comm_link_active team_synced (not (exists (?r - robot) (safe_mode ?r))))
    :effect environment_log_sent
  )

  (:action verify_hardware_status
    :parameters (?r - robot)
    :precondition (and (diagnostic_log_sent ?r) comm_link_active team_synced)
    :effect (hardware_status_verified ?r)
  )

  (:action verify_environment_readings
    :parameters ()
    :precondition (and environment_log_sent comm_link_active team_synced)
    :effect environment_verified
  )

  (:action invalidate_hardware_status_verification
    :parameters (?r - robot)
    :precondition (and (hardware_status_verified ?r) (not (diagnostic_log_sent ?r)))
    :effect (not (hardware_status_verified ?r))
  )

  (:action invalidate_environment_verification
    :parameters ()
    :precondition (and environment_verified (not environment_log_sent))
    :effect (not environment_verified)
  )

  ;; --- Contingency Actions for Communication and Logging ---
  (:action enter_safe_mode
    :parameters (?r - robot)
    :precondition (not communication_ok)
    :effect (safe_mode ?r)
  )

  (:action exit_safe_mode
    :parameters (?r - robot)
    :precondition communication_ok
    :effect (not (safe_mode ?r))
  )

  (:action buffer_diagnostic_log
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not diagnostic_log_sent ?r))
    :effect (buffered_diagnostic_log ?r)
  )

  (:action retry_send_diagnostic_log
    :parameters (?r - robot)
    :precondition (and buffered_diagnostic_log ?r comm_link_active team_synced)
    :effect (and diagnostic_log_sent ?r (not buffered_diagnostic_log ?r))
  )

  (:action buffer_environment_log
    :parameters ()
    :precondition (and environment_verified (not environment_log_sent))
    :effect buffered_environment_log
  )

  (:action retry_send_environment_log
    :parameters ()
    :precondition (and buffered_environment_log comm_link_active team_synced)
    :effect (and environment_log_sent (not buffered_environment_log))
  )

  (:action retract_status_shared_due_to_safe_mode
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (status_shared ?r))
    :effect (not (status_shared ?r))
  )

  (:action invalidate_hardware_status_due_to_safe_mode
    :parameters (?r - robot)
    :precondition (and (hardware_status_verified ?r) (safe_mode ?r))
    :effect (not (hardware_status_verified ?r))
  )

  (:action invalidate_environment_verification_due_to_comm_loss
    :parameters ()
    :precondition (and environment_verified (not communication_ok))
    :effect (not environment_verified)
  )

  ;; --- Grace Period Management Actions ---
  (:action enter_grace_period
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not (grace_period_active ?r)))
    :effect (grace_period_active ?r)
  )

  (:action exit_grace_period
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) communication_ok)
    :effect (not (grace_period_active ?r))
  )

  (:action end_grace_period_due_to_comm_failure
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) (not communication_ok))
    :effect (and (not (grace_period_active ?r)) (not (operational_state ?r)))
  )

  (:action end_grace_period_due_to_sensor_failure
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) (not temperature_normal))
    :effect (and (not (grace_period_active ?r)) (not (operational_state ?r)))
  )

  ;; --- Extended Grace Period (Adaptive Threshold Contingency) ---
  (:action extend_grace_period
    :parameters (?r - robot)
    :precondition (grace_period_active ?r)
    :effect (extended_grace_period ?r)
  )

  (:action exit_extended_grace_period
    :parameters (?r - robot)
    :precondition (and (extended_grace_period ?r) communication_ok)
    :effect (not (extended_grace_period ?r))
  )

  ;; --- Updated Emergency Reboot (Waits for safe mode to clear and requires extended grace) ---
  (:action emergency_reboot
    :parameters (?r - robot)
    :precondition (and (extended_grace_period ?r) (not (safe_mode ?r)) (not (operational_state ?r)))
    :effect (and (robot_healthy ?r) (calibrated ?r) (sufficient_resources ?r)
                 (free ?r) (not (extended_grace_period ?r)))
  )

  ;; Emergency shutdown if communication remains lost.
  (:action emergency_shutdown
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (not communication_ok))
    :effect (and (not (robot_healthy ?r)) (not (operational_state ?r)))
  )

  ;; Attempt to reboot the primary communication system.
  (:action attempt_reboot_comm
    :parameters ()
    :precondition (not communication_ok)
    :effect comm_link_active
  )

  ;; Switch to backup sensors if a sensor failure is detected.
  (:action switch_to_backup_sensor_temperature
    :parameters (?r - robot ?l - level)
    :precondition (not temperature_normal)
    :effect temperature_normal
  )

  (:action switch_to_backup_sensor_radiation
    :parameters (?r - robot ?l - level)
    :precondition (not radiation_normal)
    :effect radiation_normal
  )

  (:action switch_to_backup_sensor_dust
    :parameters (?r - robot ?l - level)
    :precondition (not dust_normal)
    :effect dust_normal
  )

  ;; --- Periodic Backup Data Broadcasting ---
  (:action broadcast_backup_data
    :parameters (?r - robot)
    :precondition (and comm_link_active team_synced
                       (or buffered_diagnostic_log ?r buffered_environment_log)
                       (not (safe_mode ?r)))
    :effect (backup_data_shared ?r)
  )

  ;; --- New: Notify Ground Control of Severe Failure ---
  (:action notify_ground_control_of_failure
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (not (operational_state ?r)) (not (failure_notified ?r)) comm_link_active)
    :effect (failure_notified ?r)
  )

  ;; --- New: System Reset for Severe Failures ---
  (:action system_reset
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (failure_notified ?r) comm_link_active)
    :effect (and (not safe_mode ?r)
                 (not grace_period_active ?r)
                 (not extended_grace_period ?r)
                 (free ?r)
                 (robot_healthy ?r)
                 (calibrated ?r)
                 (sufficient_resources ?r)
                 (not failure_notified ?r))
  )

  ;; --- New: Timing and Buffering Actions ---
  (:action start_buffer_timer
    :parameters (?r - robot)
    :precondition (buffered_diagnostic_log ?r)
    :effect (buffer_timer_expired ?r)
  )

  (:action start_state_update_timer
    :parameters (?r - robot)
    :precondition (operational_state ?r)
    :effect (state_update_timer_expired ?r)
  )

  (:action force_retry_send_diagnostic_log
    :parameters (?r - robot)
    :precondition (and buffered_diagnostic_log ?r, buffer_timer_expired ?r, comm_link_active, team_synced)
    :effect (and diagnostic_log_sent ?r (not buffered_diagnostic_log ?r) (not buffer_timer_expired ?r))
  )

  (:action force_state_update
    :parameters (?r - robot)
    :precondition (state_update_timer_expired ?r)
    :effect (update_operational_state ?r)
  )

  ;; --- Team Coordination and Inter-Agent Status Sharing ---
  (:action sync_team
    :parameters ()
    :precondition comm_link_active
    :effect team_synced
  )

  (:action unsync_team
    :parameters ()
    :precondition team_synced
    :effect (not team_synced)
  )

  (:action share_status
    :parameters (?r - robot)
    :precondition (and comm_link_active team_synced)
    :effect (status_shared ?r)
  )

  (:action send_team_status
    :parameters ()
    :precondition (and comm_link_active team_synced)
    :effect team_status_logged
  )

  ;; --- Ground Control Status Update ---
  (:action ground_control_status_update
    :parameters ()
    :precondition comm_link_active
    :effect gc_status_updated
  )

  ;; --- Safety Update Actions ---
  (:action detect_hazard
    :parameters ()
    :precondition system_nominal
    :effect (and hazard_detected (not system_nominal))
  )

  (:action clear_hazard
    :parameters ()
    :precondition hazard_detected
    :effect (and system_nominal (not hazard_detected))
  )

  ;; --- Self-Diagnosis, Calibration, and Resource Checks ---
  (:action self_diagnose
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (robot_healthy ?r)
  )

  (:action self_calibrate
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (calibrated ?r)
  )

  (:action check_resources
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (sufficient_resources ?r)
  )

  (:action perform_maintenance
    :parameters (?r - robot)
    :precondition (and (free ?r) (not (robot_healthy ?r)))
    :effect (robot_healthy ?r)
  )

  ;; --- Detailed Environmental Condition Updates ---
  (:action update_temperature_normal
    :parameters ()
    :precondition (not temperature_normal)
    :effect temperature_normal
  )

  (:action update_temperature_extreme
    :parameters ()
    :precondition temperature_normal
    :effect (not temperature_normal)
  )

  (:action update_radiation_normal
    :parameters ()
    :precondition (not radiation_normal)
    :effect radiation_normal
  )

  (:action update_radiation_extreme
    :parameters ()
    :precondition radiation_normal
    :effect (not radiation_normal)
  )

  (:action update_dust_normal
    :parameters ()
    :precondition (not dust_normal)
    :effect dust_normal
  )

  (:action update_dust_extreme
    :parameters ()
    :precondition dust_normal
    :effect (not dust_normal)
  )

  (:action pause_mission_due_to_environment
    :parameters ()
    :precondition (and (or (not temperature_normal) (not radiation_normal) (not dust_normal)) mission_active)
    :effect (not mission_active)
  )

  ;; --- Communication Blackout and Backup Protocols ---
  (:action activate_backup_comm
    :parameters ()
    :precondition (not comm_link_active)
    :effect (and backup_comm_active communication_ok)
  )

  (:action activate_backup_comm2
    :parameters ()
    :precondition (and (not comm_link_active) (not backup_comm_active2))
    :effect backup_comm_active2
  )

  (:action activate_backup_comm3
    :parameters ()
    :precondition (and (not comm_link_active) (not backup_comm_active3))
    :effect backup_comm_active3
  )

  (:action deactivate_backup_comm
    :parameters ()
    :precondition backup_comm_active
    :effect (not backup_comm_active)
  )

  (:action pause_mission
    :parameters ()
    :precondition (and (not comm_link_active)
                       (not backup_comm_active)
                       (not backup_comm_active2)
                       (not backup_comm_active3)
                       mission_active)
    :effect (and (not mission_active) (not communication_ok))
  )

  (:action resume_mission
    :parameters ()
    :precondition comm_link_active
    :effect (and mission_active communication_ok)
  )

  (:action switch_to_primary_comm
    :parameters ()
    :precondition (and comm_link_active (or backup_comm_active backup_comm_active2 backup_comm_active3))
    :effect (and (not backup_comm_active)
                 (not backup_comm_active2)
                 (not backup_comm_active3))
  )

  ;; --- Logging and Ground Control Verification Actions ---
  (:action send_diagnostic_log
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) comm_link_active team_synced (not (safe_mode ?r)))
    :effect (diagnostic_log_sent ?r)
  )

  (:action send_environment_log
    :parameters ()
    :precondition (and comm_link_active team_synced (not (exists (?r - robot) (safe_mode ?r))))
    :effect environment_log_sent
  )

  (:action verify_hardware_status
    :parameters (?r - robot)
    :precondition (and (diagnostic_log_sent ?r) comm_link_active team_synced)
    :effect (hardware_status_verified ?r)
  )

  (:action verify_environment_readings
    :parameters ()
    :precondition (and environment_log_sent comm_link_active team_synced)
    :effect environment_verified
  )

  (:action invalidate_hardware_status_verification
    :parameters (?r - robot)
    :precondition (and (hardware_status_verified ?r) (not (diagnostic_log_sent ?r)))
    :effect (not (hardware_status_verified ?r))
  )

  (:action invalidate_environment_verification
    :parameters ()
    :precondition (and environment_verified (not environment_log_sent))
    :effect (not environment_verified)
  )

  ;; --- Contingency Actions for Communication and Logging ---
  (:action enter_safe_mode
    :parameters (?r - robot)
    :precondition (not communication_ok)
    :effect (safe_mode ?r)
  )

  (:action exit_safe_mode
    :parameters (?r - robot)
    :precondition communication_ok
    :effect (not (safe_mode ?r))
  )

  (:action buffer_diagnostic_log
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not diagnostic_log_sent ?r))
    :effect (buffered_diagnostic_log ?r)
  )

  (:action retry_send_diagnostic_log
    :parameters (?r - robot)
    :precondition (and buffered_diagnostic_log ?r comm_link_active team_synced)
    :effect (and diagnostic_log_sent ?r (not buffered_diagnostic_log ?r))
  )

  (:action buffer_environment_log
    :parameters ()
    :precondition (and environment_verified (not environment_log_sent))
    :effect buffered_environment_log
  )

  (:action retry_send_environment_log
    :parameters ()
    :precondition (and buffered_environment_log comm_link_active team_synced)
    :effect (and environment_log_sent (not buffered_environment_log))
  )

  (:action retract_status_shared_due_to_safe_mode
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (status_shared ?r))
    :effect (not (status_shared ?r))
  )

  (:action invalidate_hardware_status_due_to_safe_mode
    :parameters (?r - robot)
    :precondition (and (hardware_status_verified ?r) (safe_mode ?r))
    :effect (not (hardware_status_verified ?r))
  )

  (:action invalidate_environment_verification_due_to_comm_loss
    :parameters ()
    :precondition (and environment_verified (not communication_ok))
    :effect (not environment_verified)
  )

  ;; --- Grace Period Management Actions ---
  (:action enter_grace_period
    :parameters (?r - robot)
    :precondition (and (operational_state ?r) (not (grace_period_active ?r)))
    :effect (grace_period_active ?r)
  )

  (:action exit_grace_period
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) communication_ok)
    :effect (not (grace_period_active ?r))
  )

  (:action end_grace_period_due_to_comm_failure
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) (not communication_ok))
    :effect (and (not (grace_period_active ?r)) (not (operational_state ?r)))
  )

  (:action end_grace_period_due_to_sensor_failure
    :parameters (?r - robot)
    :precondition (and (grace_period_active ?r) (not temperature_normal))
    :effect (and (not (grace_period_active ?r)) (not (operational_state ?r)))
  )

  ;; --- Extended Grace Period (Adaptive Threshold Contingency) ---
  (:action extend_grace_period
    :parameters (?r - robot)
    :precondition (grace_period_active ?r)
    :effect (extended_grace_period ?r)
  )

  (:action exit_extended_grace_period
    :parameters (?r - robot)
    :precondition (and (extended_grace_period ?r) communication_ok)
    :effect (not (extended_grace_period ?r))
  )

  ;; --- Updated Emergency Reboot (Waits for safe mode to clear and requires extended grace) ---
  (:action emergency_reboot
    :parameters (?r - robot)
    :precondition (and (extended_grace_period ?r) (not (safe_mode ?r)) (not (operational_state ?r)))
    :effect (and (robot_healthy ?r) (calibrated ?r) (sufficient_resources ?r)
                 (free ?r) (not (extended_grace_period ?r)))
  )

  ;; Emergency shutdown if communication remains lost.
  (:action emergency_shutdown
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (not communication_ok))
    :effect (and (not (robot_healthy ?r)) (not (operational_state ?r)))
  )

  ;; Attempt to reboot the primary communication system.
  (:action attempt_reboot_comm
    :parameters ()
    :precondition (not communication_ok)
    :effect comm_link_active
  )

  ;; Switch to backup sensors if a sensor failure is detected.
  (:action switch_to_backup_sensor_temperature
    :parameters (?r - robot ?l - level)
    :precondition (not temperature_normal)
    :effect temperature_normal
  )

  (:action switch_to_backup_sensor_radiation
    :parameters (?r - robot ?l - level)
    :precondition (not radiation_normal)
    :effect radiation_normal
  )

  (:action switch_to_backup_sensor_dust
    :parameters (?r - robot ?l - level)
    :precondition (not dust_normal)
    :effect dust_normal
  )

  ;; --- Periodic Backup Data Broadcasting ---
  (:action broadcast_backup_data
    :parameters (?r - robot)
    :precondition (and comm_link_active team_synced
                       (or buffered_diagnostic_log ?r buffered_environment_log)
                       (not (safe_mode ?r)))
    :effect (backup_data_shared ?r)
  )

  ;; --- New: Notify Ground Control of Severe Failure ---
  (:action notify_ground_control_of_failure
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (not (operational_state ?r)) (not (failure_notified ?r)) comm_link_active)
    :effect (failure_notified ?r)
  )

  ;; --- New: System Reset for Severe Failures ---
  (:action system_reset
    :parameters (?r - robot)
    :precondition (and (safe_mode ?r) (failure_notified ?r) comm_link_active)
    :effect (and (not safe_mode ?r)
                 (not grace_period_active ?r)
                 (not extended_grace_period ?r)
                 (free ?r)
                 (robot_healthy ?r)
                 (calibrated ?r)
                 (sufficient_resources ?r)
                 (not failure_notified ?r))
  )

  ;; --- New: Timing and Buffering Actions ---
  (:action start_buffer_timer
    :parameters (?r - robot)
    :precondition (buffered_diagnostic_log ?r)
    :effect (buffer_timer_expired ?r)
  )

  (:action start_state_update_timer
    :parameters (?r - robot)
    :precondition (operational_state ?r)
    :effect (state_update_timer_expired ?r)
  )

  (:action force_retry_send_diagnostic_log
    :parameters (?r - robot)
    :precondition (and buffered_diagnostic_log ?r, buffer_timer_expired ?r, comm_link_active, team_synced)
    :effect (and diagnostic_log_sent ?r (not buffered_diagnostic_log ?r) (not buffer_timer_expired ?r))
  )

  (:action force_state_update
    :parameters (?r - robot)
    :precondition (state_update_timer_expired ?r)
    :effect (update_operational_state ?r)
  )

  ;; --- Team Coordination and Inter-Agent Status Sharing ---
  (:action sync_team
    :parameters ()
    :precondition comm_link_active
    :effect team_synced
  )

  (:action unsync_team
    :parameters ()
    :precondition team_synced
    :effect (not team_synced)
  )

  (:action share_status
    :parameters (?r - robot)
    :precondition (and comm_link_active team_synced)
    :effect (status_shared ?r)
  )

  (:action send_team_status
    :parameters ()
    :precondition (and comm_link_active team_synced)
    :effect team_status_logged
  )

  ;; --- Ground Control Status Update ---
  (:action ground_control_status_update
    :parameters ()
    :precondition comm_link_active
    :effect gc_status_updated
  )

  ;; --- Safety Update Actions ---
  (:action detect_hazard
    :parameters ()
    :precondition system_nominal
    :effect (and hazard_detected (not system_nominal))
  )

  (:action clear_hazard
    :parameters ()
    :precondition hazard_detected
    :effect (and system_nominal (not hazard_detected))
  )

  ;; --- Self-Diagnosis, Calibration, and Resource Checks ---
  (:action self_diagnose
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (robot_healthy ?r)
  )

  (:action self_calibrate
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (calibrated ?r)
  )

  (:action check_resources
    :parameters (?r - robot)
    :precondition (free ?r)
    :effect (sufficient_resources ?r)
  )

  (:action perform_maintenance
    :parameters (?r - robot)
    :precondition (and (free ?r) (not (robot_healthy ?r)))
    :effect (robot_healthy ?r)
  )

  ;; --- Detailed Environmental Condition Updates ---
  (:action update_temperature_normal
    :parameters ()
    :precondition (not temperature_normal)
    :effect temperature_normal
  )

  (:action update_temperature_extreme
    :parameters ()
    :precondition temperature_normal
    :effect (not temperature_normal)
  )

  (:action update_radiation_normal
    :parameters ()
    :precondition (not radiation_normal)
    :effect radiation_normal
  )

  (:action update_radiation_extreme
    :parameters ()
    :precondition radiation_normal
    :effect (not radiation_normal)
  )

  (:action update_dust_normal
    :parameters ()
    :precondition (not dust_normal)
    :effect dust_normal
  )

  (:action update_dust_extreme
    :parameters ()
    :precondition dust_normal
    :effect (not dust_normal)
  )

  (:action pause_mission_due_to_environment
    :parameters ()
    :precondition (and (or (not temperature_normal) (not radiation_normal) (not dust_normal)) mission_active)
    :effect (not mission_active)
  )
)
```

---

### Explanation

1. **Global Distributed Reasoning Enhancements:**
   - The new predicates `(global_operational_consensus)` and `(elected_leader ?r)` and the associated actions *elect_leader* and *collect_status_updates* enable a distributed consensus. This consensus is now required as a precondition (via inclusion in the composite update actions) for a robot to establish its operational state. This improves reasoning by ensuring that local decisions are made in the context of the entire teamâ€™s state.

2. **Timing and Buffering Mechanisms:**
   - New timer predicates such as `(buffer_timer_expired ?r)` and `(state_update_timer_expired ?r)` together with actions *start_buffer_timer* and *start_state_update_timer* simulate the passage of time. If these timers expire, forced retry and update actions (e.g. *force_retry_send_diagnostic_log* and *force_state_update*) ensure that buffered data is eventually transmitted and that operational state is re-evaluated.

3. **Adaptive and Contingency Improvements:**
   - The model now includes adaptive sensor threshold actions, extended grace period actions, and delayed emergency reboot conditions. This ensures that transient issues do not immediately trigger severe recovery procedures. The emergency reboot now waits until safe mode has been cleared and the extended grace period is active.

4. **Enhanced Distributed Fault Tolerance:**
   - The introduction of leader election and status collection actions allows robots to reason about the teamâ€™s overall state. This shared global consensus improves decision-making in a distributed system where delays and asynchronous updates are common.

While these additions still rely on abstract timer predicates and assume some level of external coordination, they help the model better capture distributed reasoning, improved fault tolerance, and adaptive response in a high-risk, asynchronous environment.

---

This updated model now incorporates additional mechanisms for distributed reasoning, timing, and buffering to improve the overall resilience and coordination of the robot team.
